
* links 
https://www.learningraku.com/2017/02/24/testing-json-grammars/
https://andrewshitov.com/wp-content/uploads/2020/01/Using-Raku.pdf
http://blogs.perl.org/users/damian_conway/2019/09/itchscratch.html
https://perlgeek.de/blog-en/perl-6/2017-006-book-grammar.html

https://docs.raku.org/type/Signature#Constraining_defined_and_undefined_values

http://edumentab.github.io/rakudo-and-nqp-internals-course/slides-day1.pdf

https://docs.perl6.org/language/variables
https://docs.raku.org/language/5to6-nutshell

* types
$a.^name
https://docs.perl6.org/language/typesystem
https://docs.raku.org/type/Signature#Type_captures

* containers (variables)
https://docs.raku.org/language/containers
* operators
  
https://docs.perl6.org/language/operators#prefix_...
https://docs.perl6.org/language/glossary

** twigil https://docs.perl6.org/language/variables#Twigils

! : access object attributes in method, i.e. $!x
* : dynamic scope (aka elisp)
? : compile time variable



* grammar

# https://docs.raku.org/language/grammars

non-capture : <.rule> 
rule        : token + :sigspace 
...:sym<P> { <sym> } : <sym> match P
<?> : always success action
token a {...} : called from Grammar method via $self.a
:my $*a = 1; : add dynamic scope variables
<?{ $*a == 1 }> : code predicates in token rules + dynamic scoped vars
<key=.identifier> : accessed via $<key> in action
tokens are methos of match
methods can access grammar attributes
$m = Grammar.parse() , return match
rules can have arguments, pass via :args as list: :args((arg0,))
tokens in rules can have arguments:  <a($w)>
regex can be arguments or dynamic vars: TOP($*c) {...} token a ($b) { $b $*c } 

** Actions
$/ : match 
$<cap> : $/<cap> if $/ is arg


* regex

<-[\/]>+ : /[~\/]+/
\w : workchar 
\v : 


* class

class name is base { method a {} }  : unit class name is base;  method a {}

* constructs

my @a = gather for @... { take .. };
inline comments: if #`( why comment here? ) { }
