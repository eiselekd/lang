Grammar

    0 $accept: unit $end

    1 unit: stmts

    2 stmts: stmt
    3      | stmts stmt

    4 stmt: expr D

    5 D: ';'
    6  | '\n'

    7 expr: expr '+' expr
    8     | primary

    9 primary: NUM
   10        | ID

   11 $@1: ε

   12 primary: FUNC '(' ')' '{' stmts $@1 '}'

   13 $@2: ε

   14 primary: FUNC ID '(' ')' '{' stmts $@2 '}'


Terminals, with rules where they appear

    $end (0) 0
    '\n' (10) 6
    '(' (40) 12 14
    ')' (41) 12 14
    '+' (43) 7
    ';' (59) 5
    '{' (123) 12 14
    '}' (125) 12 14
    error (256)
    FUNC (258) 12 14
    ID (259) 10 14
    NUM (260) 9


Nonterminals, with rules where they appear

    $accept (13)
        on left: 0
    unit (14)
        on left: 1
        on right: 0
    stmts (15)
        on left: 2 3
        on right: 1 3 12 14
    stmt (16)
        on left: 4
        on right: 2 3
    D (17)
        on left: 5 6
        on right: 4
    expr (18)
        on left: 7 8
        on right: 4 7
    primary (19)
        on left: 9 10 12 14
        on right: 8
    $@1 (20)
        on left: 11
        on right: 12
    $@2 (21)
        on left: 13
        on right: 14


State 0

    0 $accept: • unit $end
    1 unit: • stmts
    2 stmts: • stmt
    3      | • stmts stmt
    4 stmt: • expr D
    7 expr: • expr '+' expr
    8     | • primary
    9 primary: • NUM
   10        | • ID
   12        | • FUNC '(' ')' '{' stmts $@1 '}'
   14        | • FUNC ID '(' ')' '{' stmts $@2 '}'

    FUNC  shift, and go to state 1
    ID    shift, and go to state 2
    NUM   shift, and go to state 3

    unit     go to state 4
    stmts    go to state 5
    stmt     go to state 6
    expr     go to state 7
    primary  go to state 8


State 1

   12 primary: FUNC • '(' ')' '{' stmts $@1 '}'
   14        | FUNC • ID '(' ')' '{' stmts $@2 '}'

    ID   shift, and go to state 9
    '('  shift, and go to state 10


State 2

   10 primary: ID •

    $default  reduce using rule 10 (primary)


State 3

    9 primary: NUM •

    $default  reduce using rule 9 (primary)


State 4

    0 $accept: unit • $end

    $end  shift, and go to state 11


State 5

    1 unit: stmts •  [$end]
    3 stmts: stmts • stmt
    4 stmt: • expr D
    7 expr: • expr '+' expr
    8     | • primary
    9 primary: • NUM
   10        | • ID
   12        | • FUNC '(' ')' '{' stmts $@1 '}'
   14        | • FUNC ID '(' ')' '{' stmts $@2 '}'

    FUNC  shift, and go to state 1
    ID    shift, and go to state 2
    NUM   shift, and go to state 3

    $default  reduce using rule 1 (unit)

    stmt     go to state 12
    expr     go to state 7
    primary  go to state 8


State 6

    2 stmts: stmt •

    $default  reduce using rule 2 (stmts)


State 7

    4 stmt: expr • D
    5 D: • ';'
    6  | • '\n'
    7 expr: expr • '+' expr

    '+'   shift, and go to state 13
    ';'   shift, and go to state 14
    '\n'  shift, and go to state 15

    D  go to state 16


State 8

    8 expr: primary •

    $default  reduce using rule 8 (expr)


State 9

   14 primary: FUNC ID • '(' ')' '{' stmts $@2 '}'

    '('  shift, and go to state 17


State 10

   12 primary: FUNC '(' • ')' '{' stmts $@1 '}'

    ')'  shift, and go to state 18


State 11

    0 $accept: unit $end •

    $default  accept


State 12

    3 stmts: stmts stmt •

    $default  reduce using rule 3 (stmts)


State 13

    7 expr: • expr '+' expr
    7     | expr '+' • expr
    8     | • primary
    9 primary: • NUM
   10        | • ID
   12        | • FUNC '(' ')' '{' stmts $@1 '}'
   14        | • FUNC ID '(' ')' '{' stmts $@2 '}'

    FUNC  shift, and go to state 1
    ID    shift, and go to state 2
    NUM   shift, and go to state 3

    expr     go to state 19
    primary  go to state 8


State 14

    5 D: ';' •

    $default  reduce using rule 5 (D)


State 15

    6 D: '\n' •

    $default  reduce using rule 6 (D)


State 16

    4 stmt: expr D •

    $default  reduce using rule 4 (stmt)


State 17

   14 primary: FUNC ID '(' • ')' '{' stmts $@2 '}'

    ')'  shift, and go to state 20


State 18

   12 primary: FUNC '(' ')' • '{' stmts $@1 '}'

    '{'  shift, and go to state 21


State 19

    7 expr: expr • '+' expr
    7     | expr '+' expr •  ['+', ';', '\n']

    $default  reduce using rule 7 (expr)

    Conflict between rule 7 and token '+' resolved as reduce (%left '+').


State 20

   14 primary: FUNC ID '(' ')' • '{' stmts $@2 '}'

    '{'  shift, and go to state 22


State 21

    2 stmts: • stmt
    3      | • stmts stmt
    4 stmt: • expr D
    7 expr: • expr '+' expr
    8     | • primary
    9 primary: • NUM
   10        | • ID
   12        | • FUNC '(' ')' '{' stmts $@1 '}'
   12        | FUNC '(' ')' '{' • stmts $@1 '}'
   14        | • FUNC ID '(' ')' '{' stmts $@2 '}'

    FUNC  shift, and go to state 1
    ID    shift, and go to state 2
    NUM   shift, and go to state 3

    stmts    go to state 23
    stmt     go to state 6
    expr     go to state 7
    primary  go to state 8


State 22

    2 stmts: • stmt
    3      | • stmts stmt
    4 stmt: • expr D
    7 expr: • expr '+' expr
    8     | • primary
    9 primary: • NUM
   10        | • ID
   12        | • FUNC '(' ')' '{' stmts $@1 '}'
   14        | • FUNC ID '(' ')' '{' stmts $@2 '}'
   14        | FUNC ID '(' ')' '{' • stmts $@2 '}'

    FUNC  shift, and go to state 1
    ID    shift, and go to state 2
    NUM   shift, and go to state 3

    stmts    go to state 24
    stmt     go to state 6
    expr     go to state 7
    primary  go to state 8


State 23

    3 stmts: stmts • stmt
    4 stmt: • expr D
    7 expr: • expr '+' expr
    8     | • primary
    9 primary: • NUM
   10        | • ID
   11 $@1: ε •  ['}']
   12 primary: • FUNC '(' ')' '{' stmts $@1 '}'
   12        | FUNC '(' ')' '{' stmts • $@1 '}'
   14        | • FUNC ID '(' ')' '{' stmts $@2 '}'

    FUNC  shift, and go to state 1
    ID    shift, and go to state 2
    NUM   shift, and go to state 3

    $default  reduce using rule 11 ($@1)

    stmt     go to state 12
    expr     go to state 7
    primary  go to state 8
    $@1      go to state 25


State 24

    3 stmts: stmts • stmt
    4 stmt: • expr D
    7 expr: • expr '+' expr
    8     | • primary
    9 primary: • NUM
   10        | • ID
   12        | • FUNC '(' ')' '{' stmts $@1 '}'
   13 $@2: ε •  ['}']
   14 primary: • FUNC ID '(' ')' '{' stmts $@2 '}'
   14        | FUNC ID '(' ')' '{' stmts • $@2 '}'

    FUNC  shift, and go to state 1
    ID    shift, and go to state 2
    NUM   shift, and go to state 3

    $default  reduce using rule 13 ($@2)

    stmt     go to state 12
    expr     go to state 7
    primary  go to state 8
    $@2      go to state 26


State 25

   12 primary: FUNC '(' ')' '{' stmts $@1 • '}'

    '}'  shift, and go to state 27


State 26

   14 primary: FUNC ID '(' ')' '{' stmts $@2 • '}'

    '}'  shift, and go to state 28


State 27

   12 primary: FUNC '(' ')' '{' stmts $@1 '}' •

    $default  reduce using rule 12 (primary)


State 28

   14 primary: FUNC ID '(' ')' '{' stmts $@2 '}' •

    $default  reduce using rule 14 (primary)
