// Main Madoko command line interface
module interface main
/* This module defines standard operations that are always available.

   Some types and operations are required to be defined for the compiler
   to work correctly (i.e. types like ":int" or ":list")
*/
import std/core = std/core = "";
/*
Handle and transform file paths 
*/
import std/path = std/path = "";
/* This module supports JavaScriptStyle regular expressions.

   The regular expressions conform to the regular expressions of JavaScript
   as described at <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions>
*/
import std/regex = std/regex = "";
// Common types and operations
import common = common = "";
// The ":options" type and parsing of the command line
import options = options = "";
// Provide client/server storage
// This module provides file access operations. On the web client, these
// operations only provide accesss to a global object of files which is
// *not* persistent. This code is mainly to ensure we can share as much
// code as possible between client and server.
import storage = storage = "";
// Main Madoko driver: provides files etc. and calls madoko.markdown
import driver = driver = "";
// Process math statically as LaTeX generated snippets
import mathStaticRun = mathStaticRun = "";
// Running latex and bibtex
import runLatex = runLatex = "";
// Export the version of the program.
import version = version = "";
// The ":io" effect is used for functions that perform arbitrary I/O operations.
private alias std/core/io :: E = <(std/core/exn :: X),(std/core/div :: X),(std/core/ndet :: X),(std/core/console :: X),(std/core/net :: X),(std/core/file :: X),(std/core/ui :: X),((std/core/st :: H -> E)<(std/core/global :: H)> == 1 <(std/core/read :: H -> X)<(std/core/global :: H)>,(std/core/write :: H -> X)<(std/core/global :: H)>,(std/core/alloc :: H -> X)<(std/core/global :: H)>>)> = 2;
fun markdownFiles : (args : std/core/string, action : (std/core/string, std/core/string, std/core/string, options/options) -> <(std/core/io :: E)> ()) -> <(std/core/io :: E)> ();
fun main : () -> <(std/core/io :: E)> ();
fun test : (s : ?std/core/string, moreargs : ?std/core/string) -> <(std/core/io :: E)> ();