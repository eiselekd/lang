// Running latex and bibtex
module interface runLatex
/* This module defines standard operations that are always available.

   Some types and operations are required to be defined for the compiler
   to work correctly (i.e. types like ":int" or ":list")
*/
import std/core = std/core = "";
/* This module implements extended string operations and a string builder.
*/
import std/string = std/string = "";
/* This module supports JavaScriptStyle regular expressions.

   The regular expressions conform to the regular expressions of JavaScript
   as described at <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions>
*/
import std/regex = std/regex = "";
/*
Handle and transform file paths 
*/
import std/path = std/path = "";
/* This module implements string dictionaries.
*/
import std/dict = std/dict = "";
/*
Access to the program environment and commmand line arguments.

Print the environment: "env.list.map(fun(p) { p.fst + ""="" + p.snd }).join(""\n"").print"

Note: we view the environment and command line as (total) constants in the
program. i.e. as if the program is only compiled at the point when both the 
environment and command line is supplied. 
*/
import std/env = std/env = "";
// Common types and operations
import common = common = "";
// The ":options" type and parsing of the command line
import options = options = "";
// Provide client/server storage
// This module provides file access operations. On the web client, these
// operations only provide accesss to a global object of files which is
// *not* persistent. This code is mainly to ensure we can share as much
// code as possible between client and server.
import storage = storage = "";
/*---------------------------------------------------------------------------
  Copyright 2013 Microsoft Corporation.
 
  This is free software; you can redistribute it and/or modify it under the
  terms of the Apache License, Version 2.0. A copy of the License can be
  found in the file "license.txt" at the root of this distribution.
---------------------------------------------------------------------------*/
import process = process = "";
// The ":io" effect is used for functions that perform arbitrary I/O operations.
private alias std/core/io :: E = <(std/core/exn :: X),(std/core/div :: X),(std/core/ndet :: X),(std/core/console :: X),(std/core/net :: X),(std/core/file :: X),(std/core/ui :: X),((std/core/st :: H -> E)<(std/core/global :: H)> == 1 <(std/core/read :: H -> X)<(std/core/global :: H)>,(std/core/write :: H -> X)<(std/core/global :: H)>,(std/core/alloc :: H -> X)<(std/core/global :: H)>>)> = 2;
// Stateful functions can manipulate heap ":h" using allocations, reads and writes.
private alias std/core/st<(h :: H)> :: H -> E = <(std/core/read :: H -> X)<(h :: H)>,(std/core/write :: H -> X)<(h :: H)>,(std/core/alloc :: H -> X)<(h :: H)>> = 1;
// xypic package suffers from this
fun latexStrip : (s : std/core/string) -> std/core/string;
fun latexFindLineByMatch : (texLine : std/core/string, source : std/core/string) -> (std/core/maybe :: V -> V)<std/core/string>;
// only match single line 
// normalize a file name: needed for latex 
fun runBibtex1 : forall<(e :: E)> (bibFile : std/core/string, opts : options/options, continue : (std/core/bool) -> <(std/core/io :: E)|(e :: E)> ()) -> <(std/core/io :: E)|(e :: E)> ();
fun runBibtex : forall<(e :: E)> (bibFiles : (std/core/list :: V -> V)<std/core/string>, opts : options/options, continue : (std/core/bool) -> <(std/core/io :: E)|(e :: E)> ()) -> <(std/core/io :: E)|(e :: E)> ();
fun runLaTeX : (srcFile : std/core/string, texFile : std/core/string, texCmd : std/core/string, extraArgs : std/core/string, opts : options/options, content : std/core/string, notfound : std/core/string, runCount : ?std/core/int, showWarnings : ?std/core/bool, continue : (err : std/core/int) -> <(std/core/io :: E)> ()) -> <(std/core/io :: E)> ();
fun runPdfLaTeX : (srcName : std/core/string, texFile : std/core/string, opts : options/options, content : std/core/string, continue : (std/core/int) -> <(std/core/io :: E)> ()) -> <(std/core/io :: E)> ();
fun runZip : forall<(e :: E)> (files : (std/core/list :: V -> V)<std/core/string>, zipFile : std/core/string, opts : options/options, continue : (std/core/bool) -> <(std/core/io :: E)|(e :: E)> ()) -> <(std/core/io :: E)|(e :: E)> ();