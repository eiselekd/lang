// Main Madoko driver: provides files etc. and calls madoko.markdown
module interface driver
/* This module defines standard operations that are always available.

   Some types and operations are required to be defined for the compiler
   to work correctly (i.e. types like ":int" or ":list")
*/
import std/core = std/core = "";
// Log messages
import std/log = std/log = "";
/* This module supports JavaScriptStyle regular expressions.

   The regular expressions conform to the regular expressions of JavaScript
   as described at <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions>
*/
import std/regex = std/regex = "";
/*
Handle and transform file paths 
*/
import std/path = std/path = "";
/* This module implements string dictionaries.
*/
import std/dict = std/dict = "";
import std/date = std/date = "";
/* This module implements extended string operations and a string builder.
*/
import std/string = std/string = "";
// Common types and operations
import common = common = "";
// The ":options" type and parsing of the command line
import options = options = "";
// The parsing of metadata
import metadata = metadata = "";
// Parse Madoko markdown text.
import madoko = madoko = "";
// The grammar and parsing of markdown _blocks_ (i.e. paragraphs, lists, tables, etc.)
import block = block = "";
// Provide client/server storage
// This module provides file access operations. On the web client, these
// operations only provide accesss to a global object of files which is
// *not* persistent. This code is mainly to ensure we can share as much
// code as possible between client and server.
import storage = storage = "";
// Syntax highlighting
import hilite = hilite = "";
// Parse math dimension file
import mathParse = mathParse = "";
// Process math statically as LaTeX generated snippets
import mathStatic = mathStatic = "";
// The parsing and formatting of TeX blocks.
//
// The capabilities are fairly limited and mostly geared to be able to
// parse bibtex entries. Accent and special character commands are quite well
// recognized in order to allow author names with correct accent characters.
import texParser = texParser = "";
import includes = includes = "";
// Process the bilbliography
import bibliography = bibliography = "";
private alias mathStatic/pages = (std/core/list :: V -> V)<(std/core/int, std/core/int)> = 1;
private alias mathStatic/runMathStaticFun = (content : std/core/string, inName : std/core/string, outName : std/core/string, texNamePlain : std/core/string, texNameFull : std/core/string, plainPages : (mathStatic/pages == 1 (std/core/list :: V -> V)<(std/core/int, std/core/int)>), fullPages : (mathStatic/pages == 1 (std/core/list :: V -> V)<(std/core/int, std/core/int)>), oldMathPlain : std/core/string, oldMathFull : std/core/string, opts : options/options, continue : ((std/core/maybe :: V -> V)<((std/dict/dict :: V -> V)<common/mathinfo>, std/core/string)>) -> ((std/core/io :: E) == 2 <(std/core/exn :: X),(std/core/div :: X),(std/core/ndet :: X),(std/core/console :: X),(std/core/net :: X),(std/core/file :: X),(std/core/ui :: X),((std/core/st :: H -> E)<(std/core/global :: H)> == 1 <(std/core/read :: H -> X)<(std/core/global :: H)>,(std/core/write :: H -> X)<(std/core/global :: H)>,(std/core/alloc :: H -> X)<(std/core/global :: H)>>)>) ()) -> ((std/core/io :: E) == 2 <(std/core/exn :: X),(std/core/div :: X),(std/core/ndet :: X),(std/core/console :: X),(std/core/net :: X),(std/core/file :: X),(std/core/ui :: X),((std/core/st :: H -> E)<(std/core/global :: H)> == 1 <(std/core/read :: H -> X)<(std/core/global :: H)>,(std/core/write :: H -> X)<(std/core/global :: H)>,(std/core/alloc :: H -> X)<(std/core/global :: H)>>)>) () = 3;
// The ":io" effect is used for functions that perform arbitrary I/O operations.
private alias std/core/io :: E = <(std/core/exn :: X),(std/core/div :: X),(std/core/ndet :: X),(std/core/console :: X),(std/core/net :: X),(std/core/file :: X),(std/core/ui :: X),((std/core/st :: H -> E)<(std/core/global :: H)> == 1 <(std/core/read :: H -> X)<(std/core/global :: H)>,(std/core/write :: H -> X)<(std/core/global :: H)>,(std/core/alloc :: H -> X)<(std/core/global :: H)>>)> = 2;
// Stateful functions can manipulate heap ":h" using allocations, reads and writes.
private alias std/core/st<(h :: H)> :: H -> E = <(std/core/read :: H -> X)<(h :: H)>,(std/core/write :: H -> X)<(h :: H)>,(std/core/alloc :: H -> X)<(h :: H)>> = 1;
type runners {
  con Runners(runPdfLatex: (srcFile : std/core/string, texFile : std/core/string, opts : options/options, content : std/core/string, continue : (std/core/int) -> ((std/core/io :: E) == 2 <(std/core/exn :: X),(std/core/div :: X),(std/core/ndet :: X),(std/core/console :: X),(std/core/net :: X),(std/core/file :: X),(std/core/ui :: X),((std/core/st :: H -> E)<(std/core/global :: H)> == 1 <(std/core/read :: H -> X)<(std/core/global :: H)>,(std/core/write :: H -> X)<(std/core/global :: H)>,(std/core/alloc :: H -> X)<(std/core/global :: H)>>)>) ()) -> ((std/core/io :: E) == 2 <(std/core/exn :: X),(std/core/div :: X),(std/core/ndet :: X),(std/core/console :: X),(std/core/net :: X),(std/core/file :: X),(std/core/ui :: X),((std/core/st :: H -> E)<(std/core/global :: H)> == 1 <(std/core/read :: H -> X)<(std/core/global :: H)>,(std/core/write :: H -> X)<(std/core/global :: H)>,(std/core/alloc :: H -> X)<(std/core/global :: H)>>)>) (), runBibtex: (bibFiles : (std/core/list :: V -> V)<std/core/string>, opts : options/options, continue : (std/core/bool) -> ((std/core/io :: E) == 2 <(std/core/exn :: X),(std/core/div :: X),(std/core/ndet :: X),(std/core/console :: X),(std/core/net :: X),(std/core/file :: X),(std/core/ui :: X),((std/core/st :: H -> E)<(std/core/global :: H)> == 1 <(std/core/read :: H -> X)<(std/core/global :: H)>,(std/core/write :: H -> X)<(std/core/global :: H)>,(std/core/alloc :: H -> X)<(std/core/global :: H)>>)>) ()) -> ((std/core/io :: E) == 2 <(std/core/exn :: X),(std/core/div :: X),(std/core/ndet :: X),(std/core/console :: X),(std/core/net :: X),(std/core/file :: X),(std/core/ui :: X),((std/core/st :: H -> E)<(std/core/global :: H)> == 1 <(std/core/read :: H -> X)<(std/core/global :: H)>,(std/core/write :: H -> X)<(std/core/global :: H)>,(std/core/alloc :: H -> X)<(std/core/global :: H)>>)>) (), runMathStatic: (mathStatic/runMathStaticFun == 3 (content : std/core/string, inName : std/core/string, outName : std/core/string, texNamePlain : std/core/string, texNameFull : std/core/string, plainPages : (mathStatic/pages == 1 (std/core/list :: V -> V)<(std/core/int, std/core/int)>), fullPages : (mathStatic/pages == 1 (std/core/list :: V -> V)<(std/core/int, std/core/int)>), oldMathPlain : std/core/string, oldMathFull : std/core/string, opts : options/options, continue : ((std/core/maybe :: V -> V)<((std/dict/dict :: V -> V)<common/mathinfo>, std/core/string)>) -> ((std/core/io :: E) == 2 <(std/core/exn :: X),(std/core/div :: X),(std/core/ndet :: X),(std/core/console :: X),(std/core/net :: X),(std/core/file :: X),(std/core/ui :: X),((std/core/st :: H -> E)<(std/core/global :: H)> == 1 <(std/core/read :: H -> X)<(std/core/global :: H)>,(std/core/write :: H -> X)<(std/core/global :: H)>,(std/core/alloc :: H -> X)<(std/core/global :: H)>>)>) ()) -> ((std/core/io :: E) == 2 <(std/core/exn :: X),(std/core/div :: X),(std/core/ndet :: X),(std/core/console :: X),(std/core/net :: X),(std/core/file :: X),(std/core/ui :: X),((std/core/st :: H -> E)<(std/core/global :: H)> == 1 <(std/core/read :: H -> X)<(std/core/global :: H)>,(std/core/write :: H -> X)<(std/core/global :: H)>,(std/core/alloc :: H -> X)<(std/core/global :: H)>>)>) ()), runZip: (files : (std/core/list :: V -> V)<std/core/string>, zipFile : std/core/string, opts : options/options, continue : (std/core/bool) -> ((std/core/io :: E) == 2 <(std/core/exn :: X),(std/core/div :: X),(std/core/ndet :: X),(std/core/console :: X),(std/core/net :: X),(std/core/file :: X),(std/core/ui :: X),((std/core/st :: H -> E)<(std/core/global :: H)> == 1 <(std/core/read :: H -> X)<(std/core/global :: H)>,(std/core/write :: H -> X)<(std/core/global :: H)>,(std/core/alloc :: H -> X)<(std/core/global :: H)>>)>) ()) -> ((std/core/io :: E) == 2 <(std/core/exn :: X),(std/core/div :: X),(std/core/ndet :: X),(std/core/console :: X),(std/core/net :: X),(std/core/file :: X),(std/core/ui :: X),((std/core/st :: H -> E)<(std/core/global :: H)> == 1 <(std/core/read :: H -> X)<(std/core/global :: H)>,(std/core/write :: H -> X)<(std/core/global :: H)>,(std/core/alloc :: H -> X)<(std/core/global :: H)>>)>) ()) : (runPdfLatex : (srcFile : std/core/string, texFile : std/core/string, opts : options/options, content : std/core/string, continue : (std/core/int) -> ((std/core/io :: E) == 2 <(std/core/exn :: X),(std/core/div :: X),(std/core/ndet :: X),(std/core/console :: X),(std/core/net :: X),(std/core/file :: X),(std/core/ui :: X),((std/core/st :: H -> E)<(std/core/global :: H)> == 1 <(std/core/read :: H -> X)<(std/core/global :: H)>,(std/core/write :: H -> X)<(std/core/global :: H)>,(std/core/alloc :: H -> X)<(std/core/global :: H)>>)>) ()) -> ((std/core/io :: E) == 2 <(std/core/exn :: X),(std/core/div :: X),(std/core/ndet :: X),(std/core/console :: X),(std/core/net :: X),(std/core/file :: X),(std/core/ui :: X),((std/core/st :: H -> E)<(std/core/global :: H)> == 1 <(std/core/read :: H -> X)<(std/core/global :: H)>,(std/core/write :: H -> X)<(std/core/global :: H)>,(std/core/alloc :: H -> X)<(std/core/global :: H)>>)>) (), runBibtex : (bibFiles : (std/core/list :: V -> V)<std/core/string>, opts : options/options, continue : (std/core/bool) -> ((std/core/io :: E) == 2 <(std/core/exn :: X),(std/core/div :: X),(std/core/ndet :: X),(std/core/console :: X),(std/core/net :: X),(std/core/file :: X),(std/core/ui :: X),((std/core/st :: H -> E)<(std/core/global :: H)> == 1 <(std/core/read :: H -> X)<(std/core/global :: H)>,(std/core/write :: H -> X)<(std/core/global :: H)>,(std/core/alloc :: H -> X)<(std/core/global :: H)>>)>) ()) -> ((std/core/io :: E) == 2 <(std/core/exn :: X),(std/core/div :: X),(std/core/ndet :: X),(std/core/console :: X),(std/core/net :: X),(std/core/file :: X),(std/core/ui :: X),((std/core/st :: H -> E)<(std/core/global :: H)> == 1 <(std/core/read :: H -> X)<(std/core/global :: H)>,(std/core/write :: H -> X)<(std/core/global :: H)>,(std/core/alloc :: H -> X)<(std/core/global :: H)>>)>) (), runMathStatic : (mathStatic/runMathStaticFun == 3 (content : std/core/string, inName : std/core/string, outName : std/core/string, texNamePlain : std/core/string, texNameFull : std/core/string, plainPages : (mathStatic/pages == 1 (std/core/list :: V -> V)<(std/core/int, std/core/int)>), fullPages : (mathStatic/pages == 1 (std/core/list :: V -> V)<(std/core/int, std/core/int)>), oldMathPlain : std/core/string, oldMathFull : std/core/string, opts : options/options, continue : ((std/core/maybe :: V -> V)<((std/dict/dict :: V -> V)<common/mathinfo>, std/core/string)>) -> ((std/core/io :: E) == 2 <(std/core/exn :: X),(std/core/div :: X),(std/core/ndet :: X),(std/core/console :: X),(std/core/net :: X),(std/core/file :: X),(std/core/ui :: X),((std/core/st :: H -> E)<(std/core/global :: H)> == 1 <(std/core/read :: H -> X)<(std/core/global :: H)>,(std/core/write :: H -> X)<(std/core/global :: H)>,(std/core/alloc :: H -> X)<(std/core/global :: H)>>)>) ()) -> ((std/core/io :: E) == 2 <(std/core/exn :: X),(std/core/div :: X),(std/core/ndet :: X),(std/core/console :: X),(std/core/net :: X),(std/core/file :: X),(std/core/ui :: X),((std/core/st :: H -> E)<(std/core/global :: H)> == 1 <(std/core/read :: H -> X)<(std/core/global :: H)>,(std/core/write :: H -> X)<(std/core/global :: H)>,(std/core/alloc :: H -> X)<(std/core/global :: H)>>)>) ()), runZip : (files : (std/core/list :: V -> V)<std/core/string>, zipFile : std/core/string, opts : options/options, continue : (std/core/bool) -> ((std/core/io :: E) == 2 <(std/core/exn :: X),(std/core/div :: X),(std/core/ndet :: X),(std/core/console :: X),(std/core/net :: X),(std/core/file :: X),(std/core/ui :: X),((std/core/st :: H -> E)<(std/core/global :: H)> == 1 <(std/core/read :: H -> X)<(std/core/global :: H)>,(std/core/write :: H -> X)<(std/core/global :: H)>,(std/core/alloc :: H -> X)<(std/core/global :: H)>>)>) ()) -> ((std/core/io :: E) == 2 <(std/core/exn :: X),(std/core/div :: X),(std/core/ndet :: X),(std/core/console :: X),(std/core/net :: X),(std/core/file :: X),(std/core/ui :: X),((std/core/st :: H -> E)<(std/core/global :: H)> == 1 <(std/core/read :: H -> X)<(std/core/global :: H)>,(std/core/write :: H -> X)<(std/core/global :: H)>,(std/core/alloc :: H -> X)<(std/core/global :: H)>>)>) ()) -> runners;
};
// Automatically generated. Retrieves the `runPdfLatex` constructor field of the ":runners" type.
fun runPdfLatex : (runners : runners) -> ((srcFile : std/core/string, texFile : std/core/string, opts : options/options, content : std/core/string, continue : (std/core/int) -> <(std/core/io :: E)> ()) -> <(std/core/io :: E)> ());
// Automatically generated. Retrieves the `runBibtex` constructor field of the ":runners" type.
fun runBibtex : (runners : runners) -> ((bibFiles : (std/core/list :: V -> V)<std/core/string>, opts : options/options, continue : (std/core/bool) -> <(std/core/io :: E)> ()) -> <(std/core/io :: E)> ());
// Automatically generated. Retrieves the `runMathStatic` constructor field of the ":runners" type.
fun runMathStatic : (runners : runners) -> mathStatic/runMathStaticFun;
// Automatically generated. Retrieves the `runZip` constructor field of the ":runners" type.
fun runZip : (runners : runners) -> ((files : (std/core/list :: V -> V)<std/core/string>, zipFile : std/core/string, opts : options/options, continue : (std/core/bool) -> <(std/core/io :: E)> ()) -> <(std/core/io :: E)> ());
fun (.copy) : (runners, runPdfLatex : ?(srcFile : std/core/string, texFile : std/core/string, opts : options/options, content : std/core/string, continue : (std/core/int) -> (std/core/io :: E) ()) -> (std/core/io :: E) (), runBibtex : ?(bibFiles : (std/core/list :: V -> V)<std/core/string>, opts : options/options, continue : (std/core/bool) -> (std/core/io :: E) ()) -> (std/core/io :: E) (), runMathStatic : ?mathStatic/runMathStaticFun, runZip : ?(files : (std/core/list :: V -> V)<std/core/string>, zipFile : std/core/string, opts : options/options, continue : (std/core/bool) -> (std/core/io :: E) ()) -> (std/core/io :: E) ()) -> runners;
// Create a Tex zip
// Fixup locations in warnings:
fun outputName : (inputName : std/core/string, options : options/commandOptions) -> std/core/string;
fun withLogCompress : forall<a,(e :: E)> (name : std/core/string, action : () -> <(std/core/ndet :: X)|(e :: E)> a) -> <(std/core/ndet :: X)|(e :: E)> (std/core/string, a);
// Register colorizers
// Remove <!--madoko comments
fun processContent : (inName : std/core/string, outName : std/core/string, content : std/core/string, opts : options/commandOptions, firstTime : ?std/core/bool, runners : runners, continue : (output : std/core/string, inputName : std/core/string, outputName : std/core/string, options : options/options) -> <(std/core/io :: E)> ()) -> <(std/core/io :: E)> ();