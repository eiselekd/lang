[20:10] <dmj`> that's with TypeInType
[20:10] <dmj`> which isn't enabled by default afaik
[20:10] <Solonarv> that's always on in reality
[20:10] <Solonarv> all the extension controls is whether you're allowed to write code using that
[20:11] <dmj`> maybe I live in a different reality then
[20:11] <Solonarv> % :set -XNoTypeInType
[20:11] <yahb> Solonarv:
[20:11] <Solonarv> % :k Type
[20:11] <yahb> Solonarv: Type :: *
[20:11] <Solonarv> % :k *
[20:11] <yahb> Solonarv: * :: *
[20:11] <merijn> Bringing up type in type isn't really helpful for anyone just getting started
[20:11] == o1lo01ol1o [~o1lo01ol1@cpe-74-72-45-166.nyc.res.rr.com] has quit [Remote host closed the connection]
[20:11] <merijn> Honestly, I don't think bringing up type in type is helpful for anyone in general :p
[20:11] <merijn> Confusing nonsense...
[20:11] == RockyDD [~rockydd@c-67-169-164-181.hsd1.ca.comcast.net] has quit [Remote host closed the connection]
[20:11] <Solonarv> perhaps, but then again neither is bringing up (incorrect!) information about sorts, IMO
[20:11] == tromp [~tromp@2a02:a210:1585:3200:284d:8592:d701:520e] has quit [Remote host closed the connection]
[20:12] <[exa]> guys be kind to sorts
[20:12] <geekosaur> dmj1, TypeInType became default in one of the later 8.x's
[20:12] == tromp [~tromp@2a02:a210:1585:3200:284d:8592:d701:520e] has joined #haskell
[20:12] <dmj`> geekosaur: interesting, I just assumed that if I called :k Int and didn't see "Type" it wasn't enabled
[20:12] == RockyDD [~rockydd@c-67-169-164-181.hsd1.ca.comcast.net] has joined #haskell
[20:12] <geekosaur> StarIsType is a distinct setting, and is also default as of 8.6 iirc?
[20:13] == o1lo01ol1o [~o1lo01ol1@cpe-74-72-45-166.nyc.res.rr.com] has joined #haskell
[20:13] <zincy> merijn: Are you referring to hopsing?
[20:13] == twtt [~textual@cpe-72-227-162-139.nyc.res.rr.com] has joined #haskell
[20:13] == o1lo01ol1o [~o1lo01ol1@cpe-74-72-45-166.nyc.res.rr.com] has quit [Remote host closed the connection]
[20:13] <dmj`> not on 8.6.3 :/
[20:13] <zincy> Yeah I think we forgot to answer his question
[20:13] <zincy> or hers
[20:13] <geekosaur> er, inverted. StarIsType is the old behavior, default is now NoStarIsType
[20:13] <Solonarv> the GHC manual says this about TypeInType: "In the past this extension used to enable advanced type-level programming techniques."
[20:13] <talqu> can i map/loop over all record fields somehow?
[20:14] <dmj`> talqu: using a closed type family over the meta data GHC Generics provides you, yes you can
[20:14] <[exa]> talqu: if they are of the same type, there might be lenses that do that
[20:14] <Solonarv> geekosaur: StarIsType is still the default for now
[20:14] <zincy> hopsing: haskell from first principles or learn you a haskell are good resources
[20:14] <geekosaur> oh, guess they put it off
[20:14] == Guest14210 has changed nick to fgaz
[20:14] <Solonarv> the switch was only added in 8.6.1
[20:14] <dmj`> Solonarv: thanks for correcting me, I know I should really stop leading people astray out here
[20:14] <Solonarv> things don't move that fast
[20:15] <hopsing> zincy: Thanks, Im reading the learn your haskell book right now.
[20:15] <dmj`> hopsing: the typeclassopedia is the best resource(s)
[20:15] <dmj`> @google typeclassopedia
[20:15] <lambdabot> https://wiki.haskell.org/Typeclassopedia
[20:16] <dmj`> what all the OGs learned on
[20:16] <zincy> hopsing: Try and write little programs as soon as possible
[20:17] <dmj`> hopsing: don't get bogged down by the type level stuff either, it's not sound anyways, despite the rhetoric around here
[20:17] <hopsing> zincy: I'm trying it right now. Have setup the emacs enviroment and interpreter inside emacs.
[20:17] == Jesin [~Jesin@pool-72-83-62-150.washdc.fios.verizon.net] has joined #haskell
[20:18] <zincy> hopsing: Cool! I got started by asking lots of questions here.
[20:18] <hopsing> dmj`: It sound really interesting. I can imagine it is very powerful.But must say I dont understand much still..
[20:19] == bzm3r [4b9c1ace@gateway/web/cgi-irc/kiwiirc.com/ip.75.156.26.206] has quit [Remote host closed the connection]
[20:19] <zincy> What are free monads for?
[20:20] == RockyDD [~rockydd@c-67-169-164-181.hsd1.ca.comcast.net] has quit [Remote host closed the connection]
[20:20] <zincy> I am thinking they may be fun to try out on my little interpreter
[20:20] <dmj`> hopsing: most people don't but act like they do, so you're in good company
[20:21] <dmj`> zincy: free monads allow you to divorce the definition of your computation from its evaluation
[20:21] == RockyDD [~rockydd@c-67-169-164-181.hsd1.ca.comcast.net] has joined #haskell
[20:21] == Sonderblade [~bjourne@n189-p72.eduroam.kth.se] has quit [Quit: Konversation terminated!]
[20:21] <dmj`> zincy: this is the best answer for that https://stackoverflow.com/a/13388966/453261 by johnw
[20:22] == twtt [~textual@cpe-72-227-162-139.nyc.res.rr.com] has quit [Quit: My MacBook has gone to sleep. ZZZzzz…]
[20:22] <zincy> Thanks
[20:24] <dmj`> free monads allocate a ton though, so caveat emptor
[20:24] == butterthebuddha [~butterthe@35.1.246.48] has quit [Quit: My MacBook has gone to sleep. ZZZzzz…]
[20:24] == andreas303 [~andreas@gateway/tor-sasl/andreas303] has quit [Remote host closed the connection]
[20:25] == RockyDD [~rockydd@c-67-169-164-181.hsd1.ca.comcast.net] has quit [Ping timeout: 252 seconds]
[20:27] == tryte_ [~tryte@gateway/tor-sasl/tryte] has quit [Ping timeout: 256 seconds]
[20:27] <talqu> i can't write an input in lucid https://pastebin.com/6Prb00nL. What am i doing wrong?
[20:27] == andreas303 [~andreas@gateway/tor-sasl/andreas303] has joined #haskell
[20:29] == libertyprime [~libertypr@101.98.42.91] has quit [Ping timeout: 252 seconds]
[20:29] == jb55 [~jb55@S010660e327dca171.vc.shawcable.net] has joined #haskell
[20:30] <talqu> sorry, i figured it out. need to pass none-sense empty array as a second param
[20:31] == lprd_ [~jon@2a01:e0a:177:51d0::27bd:6de] has joined #haskell
[20:33] <zincy> Is it ok to have a value type embedded in the langauge grammar to fix the issue on line 94 : https://gist.github.com/therewillbecode/e0ff5dae4b59405f6adfcad4a0b490ab
[20:33] <zincy> Sorry 91
[20:33] <zincy> I mean changing (Let String Exp Exp) to (Let String Value Exp) feels like a horrible hack
[20:34] == oisdk [~textual@2001:bb6:332d:b858:44c2:400b:8e32:a7e] has quit [Quit: My MacBook has gone to sleep. ZZZzzz…]
[20:34] <zincy> ^ Solonarv
[20:34] <Solonarv> zincy: yeah, I wouldn't make that change to Let
[20:34] <zincy> Thanks
[20:35] == yyy [~yyy@unaffiliated/tinnotl] has quit [Ping timeout: 248 seconds]
[20:35] == butterthebuddha [~butterthe@35.1.246.48] has joined #haskell
[20:35] <[exa]> zincy: do you really want lambda in FunVal ?
[20:35] <[exa]> (regarding line 91)
[20:35] <Solonarv> also, I don't actually see an error on line 94, it looks fine to me
[20:36] == oisdk [~textual@2001:bb6:332d:b858:44c2:400b:8e32:a7e] has joined #haskell
[20:36] == merijn [~merijn@a212-238-239-156.adsl.xs4all.nl] has quit [Ping timeout: 245 seconds]
[20:36] <Solonarv> [exa]: yes, FunVal represents a closure - which can be easily represented by a Haskell function
[20:36] <zincy> Solonarv: Line 91 sorry
[20:36] <zincy>       • Couldn't match expected type ‘Exp’ with actual type ‘Value’
[20:37] <Solonarv> aaah, I see
[20:37] <[exa]> oh I looked at wrong definition
[20:37] <Solonarv> well, do you have to use Let in there?
[20:37] <zincy> Bit confusing as the lambda arg is named exp but it IS a Value
[20:37] <Solonarv> well, you haven't changed defineLambda's type signature to reflect that
[20:37] <zincy> The typerror in full is at the bottom of the gist
[20:38] <Solonarv> oh no you have, nbm
[20:38] <[exa]> zincy: you might want to put 'ReaderT Scope (Except LangErr)' in a type alias btw, it's gonna look better
[20:38] == oisdk [~textual@2001:bb6:332d:b858:44c2:400b:8e32:a7e] has quit [Client Quit]
[20:39] <zincy> exa: Would it be better to wrap it in a newtype?
[20:39] <zincy> as in Solonarv's excellent example: https://gist.github.com/Solonarv/8525a61340edaad47908081381be6ff1
[20:39] <Solonarv> doesn't matter much tbh
[20:40] <[exa]> zincy: certainly shorter.
[20:40] <Solonarv> I'd prefer a newtype but an alias is fine for something small like this
[20:40] <[exa]> zincy: about defineLambda, shouldn't there be some kind of env-modifying function from Reader?
[20:40] <Solonarv> eval's Let case does precisely that
[20:41] <zincy> Solonarv: Is there any benefit to writing custom instances for monad and functor etc instead of deriving?
[20:41] <Solonarv> but there's no need for this jumping back and forth
[20:41] <Solonarv> zincy: learning, I suppose
[20:41] <[exa]> oh yes it's there transitively
[20:41] == sternmull [~kringel@p3EE04679.dip0.t-ipconnect.de] has quit [Quit: Leaving.]
[20:42] <[exa]> but Let can "only" do full expressions, not simple Values
[20:42] == o1lo01ol1o [~o1lo01ol1@cpe-74-72-45-166.nyc.res.rr.com] has joined #haskell
[20:42] <zincy> What would be a good next step for learning after implementing your example Solonarv
[20:42] <zincy> Compiler?
[20:42] <zincy> Type inference?
[20:42] <Solonarv> I mean, depends on your goal
[20:43] <Solonarv> you could add types, or output some sort of generated code
[20:43] <zincy> My goal right now is mainly learning about computer architecture
[20:43] <zincy> And type level programming in Haskell
[20:43] <[exa]> zincy: anyway, why not just: eval (Let paramName (eval exp) body) ?
[20:44] == oisdk [~textual@2001:bb6:332d:b858:44c2:400b:8e32:a7e] has joined #haskell
[20:44] == vlatkoB [~IRC_clien@unaffiliated/vlatkob] has quit [Remote host closed the connection]
[20:44] == Nd-969-M [~nndvc@109.72.55.146] has joined #haskell
[20:44] <zincy> So I guess writing a type checker and then compile the result to some architecture I want to learn about
[20:44] <zincy> could be good
[20:44] == alyptik [ayy@cpe-76-173-133-37.hawaii.res.rr.com] has quit [Ping timeout: 248 seconds]
[20:45] <zincy> exa: Which line?
[20:45] <Solonarv> yeah, and you can pretty much do them in whichever order
[20:45] <[exa]> still at 91 (sorry if I'm late now :] )
[20:46] <Solonarv> [exa]: 'exp' is misnamed, its type is Value
[20:46] == o1lo01ol1o [~o1lo01ol1@cpe-74-72-45-166.nyc.res.rr.com] has quit [Ping timeout: 248 seconds]
[20:46] <zincy> sorry :/
[20:46] <Solonarv> and eval :: Exp -> m Value, not the other way 'round
[20:47] <zincy> Solonarv: Is the way you wrote your std lib in your Gist basically the only real way of doing so in any language
[20:47] <zincy> As in it has to be done at the AST level in the compiler or interpreter
[20:48] <Solonarv> well, depending on the language you can write some of the standard library int the language itself
[20:48] <Solonarv> but usually (always? I'm not aware of any exceptions) it has to at least be built on top of some primitives that are wired into the compiler/interpreter/runtime
[20:49] <Solonarv> also, slight nitpick: 'arith' knows nothing about my Expr AST
[20:49] <Solonarv> it knows about Val, but that has nothing to do with the AST!
[20:50] <zincy> It is counter intuitive that the primitives are in your custom langugage but you get the full power of the lang you use to implement your compiler/interperter to define the operations on the primitives
[20:50] == butterthebuddha [~butterthe@35.1.246.48] has quit [Quit: My MacBook has gone to sleep. ZZZzzz…]
[20:50] == borkr [~borkr@static243-219-97.mimer.net] has quit [Ping timeout: 246 seconds]
[20:51] <Solonarv> the primitives are *not* written in the extended lambda calculus I defined there
[20:51] == oisdk [~textual@2001:bb6:332d:b858:44c2:400b:8e32:a7e] has quit [Quit: My MacBook has gone to sleep. ZZZzzz…]
[20:51] <Solonarv> they don't even know it exists!
[20:53] <zincy> hmm https://gist.github.com/therewillbecode/e0ff5dae4b59405f6adfcad4a0b490ab
[20:53] <zincy> Solonarv: The primitives are written in Haskell right?
[20:53] <Solonarv> I could make this really clear by splitting the code into multiple modules and showing that the module defining 'arith' doesn't depend on the module defining the Expr AST
[20:53] <Solonarv> indeed, they are written in Haskell
[20:54] == ggole [~ggole@2001:8003:817a:1d00:6946:6c29:33a4:12] has quit [Quit: Leaving]
[20:54] <Solonarv> zincy: I ask again: why does defineLambda have to use Let?
[20:54] <zincy> So the Val type isn't the custom language it is Haskell representing the custom language
[20:54] == RockyDD [~rockydd@c-67-169-164-181.hsd1.ca.comcast.net] has joined #haskell
[20:55] <Solonarv> not even the entire language, just a value that might be computed by it
[20:55] <zincy> Solonarv: i couldnt think of any other way of binding a lambda definition in scope
[20:56] <Solonarv> why not use this wonderful bindVar function?
[20:56] <zincy> So the language primitives are defined in the grammar not in the Haskell types
[20:56] <zincy> Good idea!
[20:57] <Solonarv> I mean, I can hand you the solution:
[20:57] <Solonarv> \val -> bindVar paramName val (eval body)
[20:57] <Solonarv> this is pretty much what I wrote in my interpreter
[20:58] == efeuska [~user@ip-213-127-2-86.ip.prioritytelecom.net] has quit [Quit: efeuska]
